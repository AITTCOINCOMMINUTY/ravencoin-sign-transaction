{"mappings":"AAGA;IACE,OAAO,EAAE,MAAM,CAAC;IAChB,SAAS,EAAE,MAAM,CAAC;IAClB,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,EAAE,MAAM,CAAC;IACpB,MAAM,EAAE,MAAM,CAAC;IACf,QAAQ,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,CAAC;IACf,KAAK,EAAE,MAAM,CAAC;CACf;AAgBD,qBACE,OAAO,EAAE,KAAK,GAAG,UAAU,GAAG,KAAK,GAAE,UAAU,EAC/C,iBAAiB,EAAE,MAAM,EACzB,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,EACnB,WAAW,EAAE,GAAG,GACf,MAAM,CAyDR;;;;AACD,wBAEE","sources":["index.ts"],"sourcesContent":["const bitcoin = require(\"bitcoinjs-lib\");\r\nimport { chains } from \"@hyperbitjs/chains\";\r\n\r\ninterface IUTXO {\r\n  address: string;\r\n  assetName: string;\r\n  txid: string;\r\n  outputIndex: number;\r\n  script: string;\r\n  satoshis: number;\r\n  height: number;\r\n  value: number;\r\n}\r\n\r\nfunction toBitcoinJS() {\r\n  return Object.assign({}, this, {\r\n    bech32: this.bech32,\r\n    bip32: {\r\n      public: (this.versions.bip32 || {}).public,\r\n      private: (this.versions.bip32 || {}).private,\r\n    },\r\n    pubKeyHash: this.versions.public,\r\n    scriptHash: this.versions.scripthash,\r\n    wif: this.versions.private,\r\n    dustThreshold: null, // TODO\r\n  });\r\n}\r\n\r\nexport function sign(\r\n  network: \"rvn\" | \"rvn-test\" | \"evr\" |\"evr-test\",\r\n  rawTransactionHex: string,\r\n  UTXOs: Array<IUTXO>,\r\n  privateKeys: any\r\n): string {\r\n  //Validation\r\n  const isRVN = network === \"rvn\";\r\n  const isRVNTEST = network === \"rvn-test\";\r\n\r\n  if (isRVN === false && isRVNTEST === false) {\r\n    throw new Error(\r\n      \"Validation error, first argument network must be rvn or rvn-test\"\r\n    );\r\n  }\r\n  const networkMapper = {\r\n    rvn: \"main\",\r\n    \"rvn-test\": \"test\",\r\n  };\r\n\r\n  const coin = chains.rvn.main;\r\n  //@ts-ignore\r\n  coin.toBitcore = toBitcore.bind(coin);\r\n  //@ts-ignore\r\n  const RAVENCOIN = coin.toBitcoinJS();\r\n\r\n  const tx = bitcoin.Transaction.fromHex(rawTransactionHex);\r\n  const txb = bitcoin.TransactionBuilder.fromTransaction(tx, RAVENCOIN);\r\n\r\n  function getKeyPairByAddress(address) {\r\n    const wif = privateKeys[address];\r\n    const keyPair = bitcoin.ECPair.fromWIF(wif, RAVENCOIN);\r\n    return keyPair;\r\n  }\r\n\r\n  function getUTXO(transactionId, index) {\r\n    return UTXOs.find((utxo) => {\r\n      return utxo.txid === transactionId && utxo.outputIndex === index;\r\n    });\r\n  }\r\n\r\n  for (let i = 0; i < tx.ins.length; i++) {\r\n    const input = tx.ins[i];\r\n\r\n    const txId = Buffer.from(input.hash, \"hex\").reverse().toString(\"hex\");\r\n    const utxo = getUTXO(txId, input.index);\r\n    if (!utxo) {\r\n      throw Error(\"Could not find UTXO for input \" + input);\r\n    }\r\n    const address = utxo.address;\r\n    const keyPair = getKeyPairByAddress(address);\r\n\r\n    const signParams = {\r\n      prevOutScriptType: \"p2pkh\",\r\n      vin: i,\r\n      keyPair,\r\n      UTXO: utxo,\r\n    };\r\n    txb.sign(signParams);\r\n  }\r\n  const signedTxHex = txb.build().toHex();\r\n  return signedTxHex;\r\n}\r\nexport default {\r\n  sign,\r\n};\r\n"],"names":[],"version":3,"file":"types.d.ts.map"}