{"mappings":";;;;AAAA;;;;AAGA,MAAM,kCAAY,iBAAmB,IAAI,CAAC,WAAW;AAY9C,SAAS,0CACd,iBAAyB,EACzB,KAAmB,EACnB,WAAgB,EACR;IACR,MAAM,KAAK,mBAAoB,OAAO,CAAC;IACvC,MAAM,MAAM,0BAA2B,eAAe,CAAC,IAAI;IAE3D,SAAS,oBAAoB,OAAO,EAAE;QACpC,MAAM,MAAM,WAAW,CAAC,QAAQ;QAChC,MAAM,UAAU,cAAe,OAAO,CAAC,KAAK;QAC5C,OAAO;IACT;IAEA,SAAS,QAAQ,aAAa,EAAE,KAAK,EAAE;QACrC,OAAO,MAAM,IAAI,CAAC,CAAC,OAAS;YAC1B,OAAO,KAAK,IAAI,KAAK,iBAAiB,KAAK,WAAW,KAAK;QAC7D;IACF;IAEA,IAAK,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,MAAM,EAAE,IAAK;QACtC,MAAM,QAAQ,GAAG,GAAG,CAAC,EAAE;QACvB,QAAQ,GAAG,CAAC;QACZ,MAAM,OAAO,iCAAO,IAAI,CAAC,MAAM,IAAI,EAAE,OAAO,OAAO,GAAG,QAAQ,CAAC;QAC/D,MAAM,OAAO,QAAQ,MAAM,MAAM,KAAK;QACtC,IAAI,CAAC,MACH,MAAM,MAAM,mCAAkC,OAAO;QAEvD,MAAM,UAAU,KAAK,OAAO;QAC5B,MAAM,UAAU,oBAAoB;QAEpC,MAAM,aAAa;YACjB,mBAAmB;YACnB,KAAK;qBACL;YACA,MAAM;QACR;QACA,IAAI,IAAI,CAAC;IACX;IACA,MAAM,cAAc,IAAI,KAAK,GAAG,KAAK;IACrC,OAAO;AACT","sources":["index.ts"],"sourcesContent":["const bitcoin = require(\"bitcoinjs-lib\");\r\nconst coininfo = require(\"coininfo\");\r\n\r\nconst RAVENCOIN = coininfo.ravencoin.main.toBitcoinJS();\r\n\r\ninterface IUTXO {\r\n  address: string;\r\n  assetName: string;\r\n  txid: string;\r\n  outputIndex: number;\r\n  script: string;\r\n  satoshis: number;\r\n  height: number;\r\n  value: number;\r\n}\r\nexport function sign(\r\n  rawTransactionHex: string,\r\n  UTXOs: Array<IUTXO>,\r\n  privateKeys: any\r\n): string {\r\n  const tx = bitcoin.Transaction.fromHex(rawTransactionHex);\r\n  const txb = bitcoin.TransactionBuilder.fromTransaction(tx, RAVENCOIN);\r\n\r\n  function getKeyPairByAddress(address) {\r\n    const wif = privateKeys[address];\r\n    const keyPair = bitcoin.ECPair.fromWIF(wif, RAVENCOIN);\r\n    return keyPair;\r\n  }\r\n\r\n  function getUTXO(transactionId, index) {\r\n    return UTXOs.find((utxo) => {\r\n      return utxo.txid === transactionId && utxo.outputIndex === index;\r\n    });\r\n  }\r\n\r\n  for (let i = 0; i < tx.ins.length; i++) {\r\n    const input = tx.ins[i];\r\n    console.log(input);\r\n    const txId = Buffer.from(input.hash, \"hex\").reverse().toString(\"hex\");\r\n    const utxo = getUTXO(txId, input.index);\r\n    if (!utxo) {\r\n      throw Error(\"Could not find UTXO for input \"+ input);\r\n    }\r\n    const address = utxo.address;\r\n    const keyPair = getKeyPairByAddress(address);\r\n\r\n    const signParams = {\r\n      prevOutScriptType: \"p2pkh\",\r\n      vin: i,\r\n      keyPair,\r\n      UTXO: utxo,\r\n    };\r\n    txb.sign(signParams);\r\n  }\r\n  const signedTxHex = txb.build().toHex();\r\n  return signedTxHex;\r\n}\r\n\r\n"],"names":[],"version":3,"file":"index.mjs.map"}